/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.ica.e2;

import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardOpenOption.CREATE;
import static java.nio.file.StandardOpenOption.WRITE;
import java.util.ArrayList;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author IFEOLUWA
 */
public class SportsShopGUI extends javax.swing.JFrame {

    /**
     * Creates new form SportsShopGUI
     */
    public SportsShopGUI() {
        initComponents();
        centerOnScreen();
        loadImages();
        
        try {
            //attempt to load books
            loadData();
        } catch (FileNotFoundException e) {
            //warn user and exit
            System.out.println("\n\n!!!!! Unable to open file !!!!!\n" + e.getMessage() + "\n");
            System.exit(0);
        } catch (IOException e) {
            //warn user and exit
            System.out.print("\n\n!!!!! File read error !!!!!\n" + e.getMessage() + "\n");
            System.exit(0);
        } catch (Exception e) {
            //warn user and exit
            System.out.print("\n\n!!!!! Processing error !!!!!\n" + e.getMessage() + "\n");
            System.exit(0);
        }

        model = new ASCTableModel(columnNames, storedData);
        
        //link abstract table model to JTable
        ascStockItem.setModel(model);
        
        //set column headers in Jtable
        for (int col = 0; col <ascStockItem.getColumnCount(); col ++) {
            TableColumn column = ascStockItem.getTableHeader().getColumnModel().getColumn(col);
            
            //set column headers
            column.setHeaderValue(columnNames[col]);
        }
    }
    
    private void centerOnScreen() {
        // Get the screen dimensions
        int screenWidth = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
        int screenHeight = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
        // Calculate the x and y coordinates to center the JFrame
        int x = (screenWidth - getWidth()) / 2;
        int y = (screenHeight - getHeight()) / 2;
        // Set the JFrame location
        setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ascStockItem = new javax.swing.JTable();
        photoPanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        buyXButton = new javax.swing.JButton();
        addYButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ashers Sports Consortium");
        setPreferredSize(new java.awt.Dimension(900, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ascStockItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        ascStockItem.setName(""); // NOI18N
        ascStockItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ascStockItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ascStockItem);

        photoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Photo"));

        itemLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        itemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout photoPanelLayout = new javax.swing.GroupLayout(photoPanel);
        photoPanel.setLayout(photoPanelLayout);
        photoPanelLayout.setHorizontalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, photoPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(photoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(itemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );
        photoPanelLayout.setVerticalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        buyXButton.setText("Buy X");
        buyXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyXButtonActionPerformed(evt);
            }
        });

        addYButton.setText("Add Y");
        addYButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addYButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(255, 0, 51));
        quitButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(buyXButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addYButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(quitButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton)
                    .addComponent(addYButton)
                    .addComponent(buyXButton)
                    .addComponent(buyButton)
                    .addComponent(addButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addYButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addYButtonActionPerformed
        // TODO add your handling code here:
        
        if (ascStockItem.getSelectedRow() == -1) {
          JOptionPane.showMessageDialog(null, "Please Select An Item From The Table.", "No Item Selected", JOptionPane.ERROR_MESSAGE );
        } else 
        if (ascStockItem.getSelectedRow() >= 0 ) {
            int row = ascStockItem.getSelectedRow();
            
//            //store the quantity of the item in the seleted row in an int variable
//            int quantityAtRowSelected = (int)model.getValueAt(row, 5);
            //create integer array which has length of 10
            Integer [] options =  new Integer[ 10 ];

            //loop from 1 to 10
            for (int indexNumber = 5; indexNumber <= 10; indexNumber++) {
                //add index value to array
                options [indexNumber - 1] = indexNumber;
            }

            //use options array to get input via pop-up dialog
            Object inputValue = JOptionPane.showInputDialog(
                null,
                "Please select a value",
                "Quantity to purchase",
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[4]
            );
            
            if (inputValue != null) {
                
                
                        try{

                            //parse textfilled contents to integer
                            int amountAdded = (int)inputValue;

                            //display amount and revelvant value

                            System.out.println("\tCode: " + model.getValueAt(row, 0));
                            System.out.println("\tTitle: " + model.getValueAt(row, 1));
                            System.out.println("\tDescription: " + model.getValueAt(row, 2));
                            System.out.println("\tPounds: " + model.getValueAt(row, 3));
                            System.out.println("\tPence: " + model.getValueAt(row, 4));
                            System.out.println("\tQuantity: " + model.getValueAt(row, 5));



                            //get remaining stock

                            int stockLeft = (int) model.getValueAt(row, 5);

                            //calculate new stock

                            stockLeft = stockLeft + amountAdded;

                            //update model with new balance
                            model.setValueAt(stockLeft, row, 5);
                            
                            //modify the storedData and output file
                            modifyStockXandY(storedData, "add", row,amountAdded );
                            
                            
                            String outputMessage= "\tItem: " + model.getValueAt(row, 1) + "\n\tUnits Added: " + amountAdded + "\n\tNew Stock Quantity: " + model.getValueAt(row, 5) ;

                            //dialog box for added item
                            JOptionPane.showMessageDialog(null, outputMessage, "Confirmation Of Added Stock", JOptionPane.INFORMATION_MESSAGE);

                            //display Transaction details
                            System.out.println("\nItem Added");
                            System.out.println("\nAmount Added: " + amountAdded + "\n");
                            System.out.println("\tStock Remaining: " + model.getValueAt(row, 5));
                            
                            //adding low stock warning
                            stockLevelChecker();
                         
                        

                } catch(NumberFormatException ex) {
                        System.out.println("Error : " + ex.getMessage());
                    }
                
            } else {
                System.out.println("add Y Cancelled!");
            }    
        }
    }//GEN-LAST:event_addYButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        // TODO add your handling code here:
        quit();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        // TODO add your handling code here:
      if (ascStockItem.getSelectedRow() == -1) {
          JOptionPane.showMessageDialog(null, "Please Select An Item From The Table.", "No Item Selected", JOptionPane.ERROR_MESSAGE );
        } else 
        if (ascStockItem.getSelectedRow() >= 0 ) {
            int row = ascStockItem.getSelectedRow();
            modifyStock(storedData, "buy", row);
            
            //get value in text field
            if ((int)model.getValueAt(row, 5) > 0) {
                    try{
                    //parse textfiled contents to integer
                    int amountBought = 1;

                    //display amount and revelvant value

                    System.out.println("\tCode: " + model.getValueAt(row, 0));
                    System.out.println("\tTitle: " + model.getValueAt(row, 1));
                    System.out.println("\tDescription: " + model.getValueAt(row, 2));
                    System.out.println("\tPounds: " + model.getValueAt(row, 3));
                    System.out.println("\tPence: " + model.getValueAt(row, 4));
                    System.out.println("\tQuantity: " + model.getValueAt(row, 5));
                    
                    

                    //get remaining stock

                    int stockLeft = (int) model.getValueAt(row, 5);

                    //calculate new stock

                    stockLeft = stockLeft - amountBought;

                    //update model with new balance
                    model.setValueAt(stockLeft, row, 5);
                    
                    String outputMessage= "\tItem: " + model.getValueAt(row, 1)  +"\n\tPrice: £" + model.getValueAt(row, 3) + "." + model.getValueAt(row, 4) + "\n\tStock Remaining: " + model.getValueAt(row, 5) ;
                   
                    //dialog box for sold item
                    JOptionPane.showMessageDialog(null, outputMessage, "Confirmation Of Sale", JOptionPane.INFORMATION_MESSAGE);

                    //display Transaction details
                    System.out.println("\nItem Sold");
                    System.out.println("\nAmount Bought: " + amountBought + "\n");
                    System.out.println("\tStock Remaining: " + model.getValueAt(row, 5));
                } catch(NumberFormatException ex) {
                    System.out.println("Error : " + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(null, "No stock availble.", "No Stock Availble", JOptionPane.WARNING_MESSAGE );
            }
            
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
     
        
        if (ascStockItem.getSelectedRow() == -1) {
          JOptionPane.showMessageDialog(null, "Please Select An Item From The Table.", "No Item Selected", JOptionPane.ERROR_MESSAGE );
        } else 
            if (ascStockItem.getSelectedRow() >= 0 ) {
            int row = ascStockItem.getSelectedRow();
            modifyStock(storedData, "add", row);
            
            
            //get value in text field
            
            try{
                //parse textfiled contents to integer
                int amountAdded = 1;
                
                //display amount and revelvant value
                
                System.out.println("\tCode: " + model.getValueAt(row, 0));
                System.out.println("\tTitle: " + model.getValueAt(row, 1));
                System.out.println("\tDescription: " + model.getValueAt(row, 2));
                System.out.println("\tPounds: " + model.getValueAt(row, 3));
                System.out.println("\tPence: " + model.getValueAt(row, 4));
                System.out.println("\tQuantity: " + model.getValueAt(row, 5));
                
                //get remaining stock
                
                int stockLeft = (int) model.getValueAt(row, 5);
                
                //calculate new stock
                
                stockLeft = stockLeft + amountAdded;
                
                //update model with new balance
                model.setValueAt(stockLeft, row, 5);
                
                String outputMessage= "\tItem Added: " + model.getValueAt(row, 1) + "\n\tStock Remaining: " + model.getValueAt(row, 5) ;
                   
                    //dialog box for sold item
                JOptionPane.showMessageDialog(null, outputMessage, "Item Added", JOptionPane.INFORMATION_MESSAGE);
                
                //display Transaction details
                System.out.println("\nStock has been Added");
                System.out.println("\nStock Added: " + amountAdded + "\n");
                System.out.println("\tStock Remaining: " + model.getValueAt(row, 5));
            } catch(NumberFormatException ex) {
                System.out.println("Error : " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
            // TODO add your handling code here:
            quit();
    }//GEN-LAST:event_formWindowClosing

    private void ascStockItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ascStockItemMouseClicked
        // TODO add your handling code here:
        stockLevelChecker();
        int row = ascStockItem.getSelectedRow();
        String nameOfItem = (String)ascStockItem.getValueAt(row, 1);
        //set text of item label
        itemLabel.setText(nameOfItem);
        
        //display picture of selected item
        displayPhoto(row);
    }//GEN-LAST:event_ascStockItemMouseClicked

    private void buyXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyXButtonActionPerformed
        // TODO add your handling code here:
        if (ascStockItem.getSelectedRow() == -1) {
          JOptionPane.showMessageDialog(null, "Please Select An Item From The Table.", "No Item Selected", JOptionPane.ERROR_MESSAGE );
        } else 
        if (ascStockItem.getSelectedRow() >= 0 ) {
            int row = ascStockItem.getSelectedRow();
            
            //store the quantity of the item in the seleted row in an int variable
            int quantityAtRowSelected = (int)model.getValueAt(row, 5);
                    //create integer array which has length of 10
                    Integer [] options =  new Integer[ 10 ];
                    
                    //loop from 1 to 10
                    for (int indexNumber = 1; indexNumber <= 10; indexNumber++) {
                        //add index value to array
                        options [indexNumber - 1] = indexNumber;
                    }
                    
                    //use options array to get input via pop-up dialog
                    Object inputValue = JOptionPane.showInputDialog(
                        null,
                        "Please select a value",
                        "Quantity to purchase",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]
                    );
            
            if (inputValue != null) {
                //get value in text field
                if (quantityAtRowSelected > 0) {
                        try{


                        if (quantityAtRowSelected >= (int)inputValue){
                            //parse textfilled contents to integer
                            int amountBought = (int)inputValue;

                            //display amount and revelvant value

                            System.out.println("\tCode: " + model.getValueAt(row, 0));
                            System.out.println("\tTitle: " + model.getValueAt(row, 1));
                            System.out.println("\tDescription: " + model.getValueAt(row, 2));
                            System.out.println("\tPounds: " + model.getValueAt(row, 3));
                            System.out.println("\tPence: " + model.getValueAt(row, 4));
                            System.out.println("\tQuantity: " + model.getValueAt(row, 5));



                            //get remaining stock

                            int stockLeft = (int) model.getValueAt(row, 5);

                            //calculate new stock

                            stockLeft = stockLeft - amountBought;

                            //update model with new balance
                            model.setValueAt(stockLeft, row, 5);
                            
                            //modify the storedData and output file
                            modifyStockXandY(storedData, "buy", row,amountBought );
                            
                            
                            String outputMessage= "\tItem: " + model.getValueAt(row, 1)  +"\n\tPrice: £" + model.getValueAt(row, 3) + "." + model.getValueAt(row, 4) + "\n\tUnits Bought: " + amountBought + "\n\tStock Remaining: " + model.getValueAt(row, 5) ;

                            //dialog box for sold item
                            JOptionPane.showMessageDialog(null, outputMessage, "Confirmation Of Sale", JOptionPane.INFORMATION_MESSAGE);

                            //display Transaction details
                            System.out.println("\nItem Sold");
                            System.out.println("\nAmount Bought: " + amountBought + "\n");
                            System.out.println("\tStock Remaining: " + model.getValueAt(row, 5));
                            
                            //adding low stock warning
                            stockLevelChecker();
                        } else if (quantityAtRowSelected < (int)inputValue) {
                           JOptionPane.showMessageDialog(null, "Insufficient Stock.", "Insufficient Stock", JOptionPane.ERROR_MESSAGE ); 
                        } 
                        

                    } catch(NumberFormatException ex) {
                        System.out.println("Error : " + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No stock availble.", "No Stock Availble", JOptionPane.WARNING_MESSAGE );
                }
            } else {
                System.out.println("Buy X Cancelled!");
            }
            
            
        }
    }//GEN-LAST:event_buyXButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SportsShopGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
         
        try{
              storedData = loadData();
              
            }catch(FileNotFoundException e) {
                System.out.println("\n\n!!!!!Unable to open file!!!!!" + e.getMessage() + "\n");
                System.exit(0);
            }catch(IOException e) {
                System.out.print("\n\n!!!!! file read error!!!!!\n " + e.getMessage() + "\n");
                System.exit(0);
            }
        if (storedData.isEmpty()){
            System.err.println("\n!!!!! Data Error: Unable to proceed !!!!!\n"); 
            System.exit(0);
        }
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SportsShopGUI().setVisible(true);
            }
        });
    }
    
    public static ArrayList loadData() throws IOException, FileNotFoundException   {
        final String INPUT_FILE_PATH = "AsherSportsConsortium3.csv";
        File inputFile = new File(INPUT_FILE_PATH);
        Scanner fileScanner;
        ArrayList initData = new ArrayList();
        
        if ( inputFile.exists() && inputFile.isFile() ) {
            //set scanner to be file object
            fileScanner = new Scanner(inputFile);
            
            while (fileScanner.hasNextLine()) {
                //read and trim line
                String Line = fileScanner.nextLine().trim();
                //chech line has cotent
                if (!Line.isEmpty()) {
                    String stockCode = Line.split(DELIMITER)[0];
                    String Title = Line.split(DELIMITER)[1];
                    String Description = Line.split(DELIMITER)[2];
                    int StockPrice = Integer.parseInt(Line.split(DELIMITER)[3]);
                    int StockPricePence = Integer.parseInt(Line.split(DELIMITER)[4]);
                    int Quantity = Integer.parseInt(Line.split(DELIMITER)[5]);
                    //add data to the arraylist
                    initData.add(new ASCStockItem(stockCode, Title, Description, StockPrice,StockPricePence, Quantity ));
                }
            }
            //close file stream by closing scanner
            fileScanner.close();
        }
        else {
            System.out.println("\n !!!!! ERROR: '" + inputFile.getName() + "' does not exist as a data file. !!!!! \n");
            System.exit(0);
        }
        
        return initData;
   
    }
    
    
//    public static ArrayList loadDataTS() throws IOException, FileNotFoundException   {
//        
//        final String INPUT_FILE="ts_products.txt";
//        File inputFile = new File(INPUT_FILE);
//        Scanner fileScanner;
//        ArrayList initDataTS = new ArrayList();
//        
//        if ( inputFile.exists() && inputFile.isFile() ) {
//            //set scanner to be file object
//            fileScanner = new Scanner(inputFile);
//            
//            while (fileScanner.hasNextLine()) {
//                //read and trim line
//                String Line = fileScanner.nextLine().trim();
//                //chech line has cotent
//                if (!Line.isEmpty()) {
//                    String stockCode = Line.split(DELIMITER)[0];
//                    String Title = Line.split(DELIMITER)[1];
//                    String model = Line.split(DELIMITER)[2];
//                    String colour = Line.split(DELIMITER)[3];
//                    String Description = Line.split(DELIMITER)[4];
//                    int StockPrice = Integer.parseInt(Line.split(DELIMITER)[5]);
//                    //int StockPricePence = Integer.parseInt(Line.split(DELIMITER)[4]);
//                    int Quantity = Integer.parseInt(Line.split(DELIMITER)[6]);
//                    //add data to the arraylist
//                    initDataTS.add(new ASCStockItem(stockCode, Title, Description, StockPrice,StockPricePence, Quantity ));
//                }
//            }
//            //close file stream by closing scanner
//            fileScanner.close();
//        }
//        else {
//            System.out.println("\n !!!!! ERROR: '" + inputFile.getName() + "' does not exist as a data file. !!!!! \n");
//            System.exit(0);
//        }
//        
//        return initDataTS;
//   
//    }
    
    
    
    public static ArrayList modifyStock (ArrayList<ASCStockItem> storedData, String action, int index) {
            if (action.equals("buy")) {
                if(storedData.get(index).getStockQuantity() > 0) {
                    int newQuantity = storedData.get(index).getStockQuantity() - 1;
                    storedData.set(index, new ASCStockItem(storedData.get(index).getProductCode(),storedData.get(index).getProductTitle(),
                    storedData.get(index).getProductDescription(), storedData.get(index).getPricePounds(),
                    storedData.get(index).getPricePence(), newQuantity ));

                    Double buyingPrice = Double.valueOf(storedData.get(index).getPricePounds() + "." + storedData.get(index).getPricePence());
                    String PriceFormatted = String.format("£%,.2f", buyingPrice);
                    System.out.println("Sale of " + storedData.get(index).getProductTitle() + " for " +
                    PriceFormatted + " confirmed. Quantity remaining: " + storedData.get(index).getStockQuantity());
                }

            }

            if (action.equals("add")) {
                int newQuantity = storedData.get(index).getStockQuantity() + 1;
                storedData.set(index, new ASCStockItem(storedData.get(index).getProductCode(), storedData.get(index).getProductTitle(),
                storedData.get(index).getProductDescription(), storedData.get(index).getPricePounds(), storedData.get(index).getPricePence(), newQuantity ));

                System.out.println("New Quantity of " + storedData.get(index).getProductTitle() + " is: " + 
                        storedData.get(index).getStockQuantity());
            }

            return storedData;
        }
    
    
    public static ArrayList modifyStockXandY (ArrayList<ASCStockItem> storedData, String action, int index, int boughtSold) {
            if (action.equals("buy")) {
                if(storedData.get(index).getStockQuantity() > 0) {
                    int newQuantity = storedData.get(index).getStockQuantity() - boughtSold;
                    storedData.set(index, new ASCStockItem(storedData.get(index).getProductCode(),storedData.get(index).getProductTitle(),
                    storedData.get(index).getProductDescription(), storedData.get(index).getPricePounds(),
                    storedData.get(index).getPricePence(), newQuantity ));

                    Double buyingPrice = Double.valueOf(storedData.get(index).getPricePounds() + "." + storedData.get(index).getPricePence());
                    String PriceFormatted = String.format("£%,.2f", buyingPrice);
                    System.out.println("Sale of " + storedData.get(index).getProductTitle() + " for " +
                    PriceFormatted + " confirmed. Quantity remaining: " + storedData.get(index).getStockQuantity());
                }

            }

            if (action.equals("add")) {
                int newQuantity = storedData.get(index).getStockQuantity() + boughtSold;
                storedData.set(index, new ASCStockItem(storedData.get(index).getProductCode(), storedData.get(index).getProductTitle(),
                storedData.get(index).getProductDescription(), storedData.get(index).getPricePounds(), storedData.get(index).getPricePence(), newQuantity ));

                System.out.println("New Quantity of " + storedData.get(index).getProductTitle() + " is: " + 
                        storedData.get(index).getStockQuantity());
            }

            return storedData;
        }
   
    
    public  void savedData() throws IOException, FileNotFoundException {
        final String OUTPUT_FILE_PATH = "asc_Output.txt";
        Path path = Paths.get(OUTPUT_FILE_PATH);
        Files.deleteIfExists(path);
        
        BufferedOutputStream buffer = new BufferedOutputStream(
        Files.newOutputStream(path, CREATE, WRITE)
        );
        
        //output string
        String report ="";
        
        //loop through arraylist
        for (int index = 0; index < storedData.size(); index++) {
            //add field of current stored data to string, followed by the delimiter
            report += storedData.get(index).getProductCode() + DELIMITER;
            report += storedData.get(index).getProductTitle() + DELIMITER;
            report += storedData.get(index).getProductDescription() + DELIMITER;
            report += storedData.get(index).getPricePounds() + DELIMITER;
            report += storedData.get(index).getPricePence() + DELIMITER;
            report += storedData.get(index).getStockQuantity() + "\r\n";
        } //end of loop
        //transform output sring to byte array
        byte  data[] = report.getBytes();
        
        //write byte array to the stream
        buffer.write(data, 0, data.length);
        
       //close buffer so stream writes to file
       buffer.close();
       
       //confirm data written
       System.out.println("\n\nData written to file at:" + path.toAbsolutePath().toString());
        
        
    }
    
    private void loadImages() {
        
        //loop through pictures array
        for (int index = 0; index < imageNamesArray.length; index++ ) {
            
            //get photo filenae from stock list item
            String filename = "photos/" + imageNamesArray[index] + ".jpg";
            
            //create buffereed image object - set to null if loading fails
            BufferedImage photos = null;
            
            //try to load photos
            try {
                photos = ImageIO.read(new File(filename));
                
            } catch (IOException e) {
                //log and report error - but no need to exit or return
                String message = "unable to load image '" + filename + "'";
                Logger.getLogger(SportsShopGUI.class.getName()).log(Level.WARNING, null, message);
                System.err.println("\n\n!!!!! " + message + " !!!!!\n");
            } finally {
                //add either loaded photos or null to arraylist
                photoList.add(photos);
            }
        }
    }
    
    private void displayPhoto (int index) {
        //clear any text in labels
        photoLabel.setText("");
        //itemLabel.setText("");
        
        //get buffered image
        BufferedImage photo = photoList.get(index);
                
        //check if image is null
        if (photo == null) {
            //set text label
            photoLabel.setText("Image not available.");
        } else {
            //set photolabel using photo array list
            photoLabel.setIcon(new ImageIcon(photo));
            
            //set text of item label
            //itemLabel.setText(imageNamesArray[index]);
        }
    }
    
    //method to check stock level
    public void stockLevelChecker() {
        int rowSelected =  ascStockItem.getSelectedRow();
        String itemAtRow = (String) ascStockItem.getValueAt(rowSelected, 1);
        int quantityAtRow = (int) ascStockItem.getValueAt(rowSelected, 5);
        
        if (quantityAtRow <= 4) {
            JOptionPane.showMessageDialog(null, itemAtRow +" has only " + quantityAtRow + " unit of stock." , "Low Stock Warning", JOptionPane.WARNING_MESSAGE );
        }
    }
    
    public void quit() {
        try {
            //attempt to save books
            savedData();
        } catch (FileNotFoundException e) {
            //warn user
            System.err.println("\n!!!!! Unable to open output file !!!!!\n" + e.getMessage());
        } catch (IOException e) {
            //warn user
            System.err.print("\n!!!!! File write error !!!!!\n" + e.getMessage());
        } catch (Exception e) {
            //warn user and exit
            System.err.print("\n!!!!! Processing error !!!!!\n" + e.getMessage());
        }

        //end message
        System.out.println("\n\n***** Application closed by user *****\n");

        //quit
        System.exit(0);

    } //end of method
    
    
    private static ArrayList<ASCStockItem> storedData = new ArrayList<>();
    private ArrayList<BufferedImage> photoList = new ArrayList <>();
    private static final String DELIMITER = ",";
    private String[] columnNames = new String[]{"Code", "Title", "Description", "Pounds","pence", "Quantity"};
    private String [] imageNamesArray = {"FTB4444444","GLF5555555","CYC1212121", "CYC1111222","SWM2342341","RUN1234567", "CYC1111111", "SWM2222222","GLF3333333", "FTB4121611","RUN1234500", "GLF5764531", "FTB4121612","GLF5764731", "SWM2222221"};
    ASCTableModel model;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addYButton;
    private javax.swing.JTable ascStockItem;
    private javax.swing.JButton buyButton;
    private javax.swing.JButton buyXButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JPanel photoPanel;
    private javax.swing.JButton quitButton;
    // End of variables declaration//GEN-END:variables
}
